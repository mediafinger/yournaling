# Name of your application. Used to uniquely configure containers.
service: yournaling.com

# Name of the container image.
image: yournaling.com/app # TODO

# Deploy to these servers.
#
# TODO
#
servers:
  web:
    - 192.168.0.1
  job:
    hosts:
      - 192.168.0.1
    cmd: bin/jobs


# Enable SSL auto certification via Let's Encrypt and allow for multiple apps on a single web server.
# Remove this section when using multiple web servers and ensure you terminate SSL at your load balancer.
#
# Note: If using Cloudflare, set encryption mode in SSL/TLS setting to "Full" to enable CF-to-app encryption.
proxy:
  ssl: true
  host: yournaling.com # TODO: parameterize this!
  app_port: 3000 # Proxy connects to your container on port 80 by default.


# Credentials for your docker image host.
#
registry:
  server: ghcr.io
  username:
    - KAMAL_REGISTRY_USERNAME
  password:
    - KAMAL_REGISTRY_PASSWORD


# Configure builder setup.
builder:
  arch: amd64 # TODO: intel-server or ARM64-macbook ?

  # # Build image via remote server (useful for faster amd64 builds on arm64 computers)
  # remote: ssh://docker@docker-builder-server
  #
  # # Pass arguments and secrets to the Docker build process
  # args:
  #   RUBY_VERSION: ruby-3.3.6
  # secrets:
  #   - GITHUB_TOKEN
  #   - RAILS_MASTER_KEY

# Inject ENV variables into containers (secrets come from .kamal/secrets).
#
# TODO
#
env:
  clear:
    # Match this to any external database server to configure Active Record correctly
    # Use yournaling-db for a db accessory server on same machine via local kamal docker network.
    # DB_HOST: 192.168.0.2

    # Run the Solid Queue Supervisor inside the web server's Puma process to do jobs.
    # When you start using multiple servers, you should split out job processing to a dedicated machine.
    SOLID_QUEUE_IN_PUMA: false

    # Set number of processes dedicated to Solid Queue (default: 1)
    # JOB_CONCURRENCY: 3

    # Set number of cores available to the application on each server (default: 1).
    # WEB_CONCURRENCY: 2

    # Log everything from Rails
    # RAILS_LOG_LEVEL: debug

  secret:
    - RAILS_MASTER_KEY

# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
#
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a different ssh user than root
#
# TODO - configure after provisioning?!
#
# ssh:
#   user: app


# Use a persistent storage volume.
#
volumes:
  - "/data/storage:/app/storage" # TODO


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
#
asset_path: /app/public/assets


# more config
#
allow_empty_roles: false
# primary_role: web # default
require_destination: true


# Configure rolling deploys by setting a wait time between batches of restarts.
#
boot:
  limit: 10 # Can also specify as a percentage of total hosts, such as "25%"
  wait: 2


# Use accessory services (secrets come from .kamal/secrets).
#
# TODO
#
# accessories:
#   postgres:
#     image: postgres:16.4-alpine
#     host: 192.168.0.2
#     port: 3306
#     env:
#       clear:
#         MYSQL_ROOT_HOST: '%'
#       secret:
#         - MYSQL_ROOT_PASSWORD
#     files:
#       - config/mysql/production.cnf:/etc/mysql/my.cnf
#       - db/production.sql:/docker-entrypoint-initdb.d/setup.sql
#     directories:
#       - data:/var/lib/mysql
#   sqlite3:
#     image: sqlite3:3.44.2
#     host: 192.168.0.2
#     port: 6379
#     directories:
#       - data:/data





# Aliases are triggered with "bin/kamal <alias>". You can overwrite arguments on invocation:
# "bin/kamal logs -r job" will tail logs from the first server in the job section.
aliases:
  console: app exec --interactive --reuse "bin/rails console"
  shell: app exec --interactive --reuse "bash"
  logs: app logs -f
  dbc: app exec --interactive --reuse "bin/rails dbconsole"


# Use a persistent storage volume for sqlite database files and local Active Storage files.
# Recommended to change this to a mounted volume path that is backed up off server.
volumes:
  - "yournaling_storage:/rails/storage"


# Bridge fingerprinted assets, like JS and CSS, between versions to avoid
# hitting 404 on in-flight requests. Combines all files from new and old
# version inside the asset_path.
asset_path: /rails/public/assets

# Configure the image builder.
