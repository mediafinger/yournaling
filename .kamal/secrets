# Secrets defined here are available for reference under registry/password, env/secret, builder/secrets,
# and accessories/*/env/secret in config/deploy.yml. All secrets should be pulled from either
# password manager, ENV, or a file. DO NOT ENTER RAW CREDENTIALS HERE! This file needs to be safe for git.

# Option 1: Read secrets from the environment
#
# KAMAL_REGISTRY_PASSWORD=$KAMAL_REGISTRY_PASSWORD


# Option 2: Read secrets via a command
# Improve security by using a password manager. Never check config/master.key into git!
#
# RAILS_MASTER_KEY=$(cat config/master.key)


# Option 3: Read secrets via kamal secrets helpers
# These will handle logging in and fetching the secrets in as few calls as possible
# There are adapters for 1Password, LastPass, Bitwarden
#
# fetch a list of secrets of one Vault item which has many passwords / secrets
SECRETS=$(kamal secrets fetch --adapter 1password --account GLNIDFZZ3VHCFP3FWLQ72KXDGQ --from yournaling.com/Production KAMAL_REGISTRY_PASSWORD KAMAL_REGISTRY_USERNAME RAILS_MASTER_KEY YOURNALING_DB_NAME YOURNALING_DB_PASSWORD YOURNALING_DB_USERNAME)
# extract secrets from the fetched secrets onto their ENV variables
KAMAL_REGISTRY_PASSWORD=$(kamal secrets extract KAMAL_REGISTRY_PASSWORD $SECRETS)
KAMAL_REGISTRY_USERNAME=$(kamal secrets extract KAMAL_REGISTRY_USERNAME $SECRETS)
RAILS_MASTER_KEY=$(kamal secrets extract RAILS_MASTER_KEY $SECRETS)
POSTGRES_DB: $(kamal secrets extract YOURNALING_DB_NAME $SECRETS)
POSTGRES_PASSWORD: $(kamal secrets extract YOURNALING_DB_PASSWORD $SECRETS)
POSTGRES_USER: $(kamal secrets extract YOURNALING_DB_USERNAME $SECRETS)

#
# Use a GITHUB_TOKEN if private repositories are needed for the image
# GITHUB_TOKEN=$(gh config get -h github.com oauth_token)
